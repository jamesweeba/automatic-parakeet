{"ast":null,"code":"var _jsxFileName = \"/home/quaci/Documents/login/client/src/LoginSignup/form.jsx\";\nimport TextInput from './Input';\nimport DropDown from \"./size\";\nimport Button from \"./button\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form({\n  setImageDescription,\n  imageDescription,\n  setImageSize,\n  setImageUrl,\n  imageSize,\n  setLoading,\n  setError\n}) {\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setLoading(true);\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: JSON.stringify({\n        prompt: imageDescription\n      }),\n      url: 'http://localhost:4000/generate-images'\n    };\n    try {\n      let response = JSON.parse(await axios(requestOptions));\n      if (response.status == \"COMPLETED\") {\n        let image = response.data[0].asset_url;\n        setImageUrl(image);\n      }\n\n      // You can access response.data and response.error similar to the fetch example\n      // if (response.error) {\n      //     // handle error\n      // }\n    } catch (err) {\n      console.log(err);\n      // setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(TextInput, {\n      setImageDescription: setImageDescription,\n      imageDescription: imageDescription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, {\n      setImageSize: setImageSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["TextInput","DropDown","Button","axios","jsxDEV","_jsxDEV","Form","setImageDescription","imageDescription","setImageSize","setImageUrl","imageSize","setLoading","setError","handleSubmit","e","preventDefault","requestOptions","method","headers","data","JSON","stringify","prompt","url","response","parse","status","image","asset_url","err","console","log","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/quaci/Documents/login/client/src/LoginSignup/form.jsx"],"sourcesContent":["\nimport TextInput from './Input';\nimport DropDown from \"./size\";\nimport Button from \"./button\";\nimport axios from \"axios\";\n\nfunction Form({ setImageDescription, imageDescription, setImageSize, setImageUrl, imageSize, setLoading, setError }) {\n\n    async function handleSubmit(e) {\n        e.preventDefault()\n\n\n        setLoading(true)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            data: JSON.stringify({ prompt: imageDescription }),\n            url: 'http://localhost:4000/generate-images'\n        };\n\n        try {\n            let response = JSON.parse(await axios(requestOptions));\n            if(response.status==\"COMPLETED\"){\n                let image=response.data[0].asset_url;\n                setImageUrl(image);\n                \n\n            }\n            \n            // You can access response.data and response.error similar to the fetch example\n            // if (response.error) {\n            //     // handle error\n            // }\n         \n        } catch (err) {\n             console.log(err);\n            // setError(err);\n        } finally {\n             setLoading(false)\n        }\n\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextInput setImageDescription={setImageDescription} imageDescription={imageDescription} />\n            <DropDown setImageSize={setImageSize} />\n            <Button />\n        </form>\n\n    )\n\n}\n\nexport default Form"],"mappings":";AACA,OAAOA,SAAS,MAAM,SAAS;AAC/B,OAAOC,QAAQ,MAAM,QAAQ;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,IAAIA,CAAC;EAAEC,mBAAmB;EAAEC,gBAAgB;EAAEC,YAAY;EAAEC,WAAW;EAAEC,SAAS;EAAEC,UAAU;EAAEC;AAAS,CAAC,EAAE;EAEjH,eAAeC,YAAYA,CAACC,CAAC,EAAE;IAC3BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAGlBJ,UAAU,CAAC,IAAI,CAAC;IAEhB,MAAMK,cAAc,GAAG;MACnBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,MAAM,EAAEf;MAAiB,CAAC,CAAC;MAClDgB,GAAG,EAAE;IACT,CAAC;IAED,IAAI;MACA,IAAIC,QAAQ,GAAGJ,IAAI,CAACK,KAAK,CAAC,MAAMvB,KAAK,CAACc,cAAc,CAAC,CAAC;MACtD,IAAGQ,QAAQ,CAACE,MAAM,IAAE,WAAW,EAAC;QAC5B,IAAIC,KAAK,GAACH,QAAQ,CAACL,IAAI,CAAC,CAAC,CAAC,CAACS,SAAS;QACpCnB,WAAW,CAACkB,KAAK,CAAC;MAGtB;;MAEA;MACA;MACA;MACA;IAEJ,CAAC,CAAC,OAAOE,GAAG,EAAE;MACTC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MACjB;IACJ,CAAC,SAAS;MACLlB,UAAU,CAAC,KAAK,CAAC;IACtB;EAEJ;EACA,oBACIP,OAAA;IAAM4B,QAAQ,EAAEnB,YAAa;IAAAoB,QAAA,gBACzB7B,OAAA,CAACL,SAAS;MAACO,mBAAmB,EAAEA,mBAAoB;MAACC,gBAAgB,EAAEA;IAAiB;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3FjC,OAAA,CAACJ,QAAQ;MAACQ,YAAY,EAAEA;IAAa;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxCjC,OAAA,CAACH,MAAM;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAIf;AAACC,EAAA,GA9CQjC,IAAI;AAgDb,eAAeA,IAAI;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}